#lang sicp

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))

    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue")
          (car front-ptr)))
    (define (delete-queue!)
      (if (empty-queue?)
          (error "FRONT called with an empty queue")
          (set! front-ptr (cdr front-ptr))))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
        (if (empty-queue?)
            (begin (set! front-ptr new-pair) (set! rear-ptr new-pair))
            (begin (set-cdr! rear-ptr new-pair) (set! rear-ptr new-pair)))))
    (define (print-queue) front-ptr)
    
    (define (dispatch m)
      (cond ((eq? m 'delete-queue!) delete-queue!)
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'empty-queue?) empty-queue?)
            ((eq? m 'front-queue) front-queue)
            ((eq? m 'print-queue) print-queue)
            (else (error "unknown dispatch"))))
    dispatch))

(define q1 (make-queue))
((q1 'print-queue))
((q1 'insert-queue!) 'a)
((q1 'print-queue))
((q1 'insert-queue!) 'b)
((q1 'print-queue))
((q1 'delete-queue!))
((q1 'print-queue))
((q1 'delete-queue!))
((q1 'print-queue))